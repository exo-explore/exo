syntax = "proto3";

package node_service;

service NodeService {
  rpc SendPrompt (SendPromptRequest) returns (Empty) {}
  rpc SendTensor (SendTensorRequest) returns (Empty) {}
  rpc SendExample (SendExampleRequest) returns (Empty) {}
  rpc CollectTopology (CollectTopologyRequest) returns (CollectTopologyResponse) {}
  rpc SendNewToken (SendNewTokenRequest) returns (Empty) {}
  rpc SendOpaqueStatus (SendOpaqueStatusRequest) returns (Empty) {}
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse) {}
}

message Shard {
  string model_id = 1;
  int32 start_layer = 2;
  int32 end_layer = 3;
  int32 n_layers = 4;
}

message SendPromptRequest {
  Shard shard = 1;
  string prompt = 2;
  string request_id = 3;
  int32 sequence_number = 4;
  string trace_parent = 5;
}

message SendTensorRequest {
  Shard shard = 1;
  Tensor tensor = 2;
  string request_id = 3;
  int32 sequence_number = 4;
  string trace_parent = 5;
}

message SendExampleRequest {
  Shard shard = 1;
  bytes example = 2;
  bytes target = 3;
  bytes length = 4;
  string request_id = 5;
  bool train = 6;
  string trace_parent = 7;
}

message Loss {
  float loss = 1;
  optional Tensor grads = 2;
}

message Tensor {
  bytes tensor_data = 1;
  repeated int32 shape = 2;
  string dtype = 3;
}

message CollectTopologyRequest {
  repeated string visited = 1;
  int32 max_depth = 2;
}

message CollectTopologyResponse {
  message DeviceFlops {
    double fp32 = 1;
    double fp16 = 2;
    double int8 = 3;
  }

  message DeviceCapabilities {
    string model = 1;
    string chip = 2;
    int32 memory = 3;
    DeviceFlops flops = 4;
  }

  message PeerConnection {
    string to_id = 1;
    optional string description = 2;
  }

  message Node {
    string id = 1;
    DeviceCapabilities capabilities = 2;
    repeated PeerConnection connections = 3;
  }

  message Topology {
    repeated Node nodes = 1;
    optional string active_node_id = 2;
  }

  Topology topology = 1;
}

message SendNewTokenRequest {
  string request_id = 1;
  int32 token = 2;
  bool is_finished = 3;
  int32 sequence_number = 4;
  string trace_parent = 5;
}

message SendOpaqueStatusRequest {
  string request_id = 1;
  string status = 2;
  string trace_parent = 3;
}

message HealthCheckRequest {}

message HealthCheckResponse {
  bool is_healthy = 1;
}

message Empty {}
